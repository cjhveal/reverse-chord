// Generated by CoffeeScript 1.4.0
(function() {
  var ChordView, KeyCollection, KeyModel, KeyView, KeyboardView, chromaticNotes, keyViewTemplate, notes,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  chromaticNotes = teoria.scale('C', 'chromatic').notes();

  notes = _.map(chromaticNotes, function(note) {
    return {
      note: note
    };
  });

  KeyModel = (function(_super) {

    __extends(KeyModel, _super);

    function KeyModel() {
      return KeyModel.__super__.constructor.apply(this, arguments);
    }

    return KeyModel;

  })(Backbone.Model);

  KeyCollection = (function(_super) {

    __extends(KeyCollection, _super);

    function KeyCollection() {
      this.selectedNotes = __bind(this.selectedNotes, this);

      this.isEbony = __bind(this.isEbony, this);

      this.model = __bind(this.model, this);

      this.initialize = __bind(this.initialize, this);
      return KeyCollection.__super__.constructor.apply(this, arguments);
    }

    KeyCollection.prototype.initialize = function() {
      var cMajorNotes;
      cMajorNotes = teoria.scale('C', 'major').notes();
      return this.cMajorKeys = _.invoke(cMajorNotes, 'key');
    };

    KeyCollection.prototype.model = function(attrsArg, opts) {
      var attrs, defaults;
      defaults = {
        note: teoria.note('C'),
        ebony: false
      };
      attrs = _.extend({}, defaults, attrsArg);
      attrs.ebony = this.isEbony(attrs.note);
      return new KeyModel(attrs, opts);
    };

    KeyCollection.prototype.isEbony = function(note) {
      return !_.contains(this.cMajorKeys, note.key());
    };

    KeyCollection.prototype.selectedNotes = function() {
      var keys;
      keys = this.filter(function(key) {
        return key.get('selected');
      });
      return _.map(keys, function(key) {
        return key.get('note');
      });
    };

    return KeyCollection;

  })(Backbone.Collection);

  ChordView = (function(_super) {

    __extends(ChordView, _super);

    function ChordView() {
      return ChordView.__super__.constructor.apply(this, arguments);
    }

    return ChordView;

  })(Backbone.View);

  keyViewTemplate = Handlebars.compile("<div class='key{{#if ebony}} ebony{{/if}}{{#if selected}} selected{{/if}}'></div>");

  KeyView = (function(_super) {

    __extends(KeyView, _super);

    function KeyView() {
      this.toggleSelected = __bind(this.toggleSelected, this);
      return KeyView.__super__.constructor.apply(this, arguments);
    }

    KeyView.prototype.template = keyViewTemplate;

    KeyView.prototype.events = {
      "click": 'toggleSelected'
    };

    KeyView.prototype.modelEvents = {
      "change:selected": 'render'
    };

    KeyView.prototype.toggleSelected = function() {
      return this.model.set('selected', !this.model.get('selected'));
    };

    return KeyView;

  })(Backbone.Marionette.ItemView);

  KeyboardView = (function(_super) {

    __extends(KeyboardView, _super);

    function KeyboardView() {
      return KeyboardView.__super__.constructor.apply(this, arguments);
    }

    KeyboardView.prototype.itemView = KeyView;

    KeyboardView.prototype.el = '#keyboard';

    return KeyboardView;

  })(Backbone.Marionette.CollectionView);

  window.view = new KeyboardView({
    collection: new KeyCollection(notes)
  });

  view.render();

}).call(this);
